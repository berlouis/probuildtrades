generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  password            String
  role                String           @default("user")
  createdAt           DateTime         @default(now())
  name                String?
  updatedAt           DateTime?
  Builder             Builder[]
  Subscription        Subscription[]
  stripeCustomerId    String?
  EnforcementLog      EnforcementLog[]
  Trade               Trade[]
  Company             Company[]
  canSubscribe        Boolean          @default(true)
  isSuspended      Boolean          @default(false)
  pendingEmail        String? // For email change confirmation
  pendingEmailToken   String? // Token for email change
  pendingEmailExpires DateTime? // Token expiry
  pendingPhone        String? // For phone change confirmation
  pendingPhoneToken   String? // Token for phone change
  pendingPhoneExpires DateTime? // Token expiry
  faceTemplates       FaceTemplate[]   @relation("UserFaceTemplates")
  auditLogs           AuditLog[]       @relation("UserAuditLogs")
}

model Builder {
  id                 Int       @id @default(autoincrement())
  name               String
  email              String
  userId             Int
  licenseStatus      String
  licenseClass       String
  licenseExpiry      DateTime
  licenseState       String
  licenseId          String?
  isSuspended        Boolean   @default(false)
  suspensionReason   String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  flagged            Boolean   @default(false)
  flagReason         String?
  duplicateFlaggedAt DateTime?
  verified           Boolean   @default(false)
  licenseEnforcedAt  DateTime?
  stripeCustomerId   String?
  phone              String?
  address            String?

  User                  User                   @relation(fields: [userId], references: [id])
  EnforcementLog        EnforcementLog[]
  payments              Payment[]
  DuplicateLicenseFlags DuplicateLicenseFlag[]
  serviceId             Int?
  Service               Service?               @relation("ServiceBuilders", fields: [serviceId], references: [id])
}

model Trade {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @default("placeholder@trade.com")
  licenseClass  String   @default("basic")
  licenseExpiry DateTime @default(now())
  licenseState  String   @default("NSW")
  licenseStatus String   @default("pending")
  userId        Int      @default(1)

  licenseId          String?
  isSuspended        Boolean   @default(false)
  suspensionReason   String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  flagged            Boolean   @default(false)
  flagReason         String?
  duplicateFlaggedAt DateTime?
  verified           Boolean   @default(false)
  licenseEnforcedAt  DateTime?
  stripeCustomerId   String?
  phone              String?
  address            String?

  User                 User                   @relation(fields: [userId], references: [id])
  EnforcementLog       EnforcementLog[]
  SubTrade             SubTrade[]
  payments             Payment[]
  serviceId            Int?
  Service              Service?               @relation("ServiceTrades", fields: [serviceId], references: [id])
  DuplicateLicenseFlag DuplicateLicenseFlag[]
}

model Company {
  id            Int      @id @default(autoincrement())
  name          String
  address       String?
  email         String   @default("placeholder@company.com")
  licenseClass  String   @default("basic")
  licenseExpiry DateTime @default(now())
  licenseState  String   @default("NSW")
  licenseStatus String   @default("pending")
  userId        Int      @default(1)

  licenseId          String?
  isSuspended        Boolean   @default(false)
  suspensionReason   String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  flagged            Boolean   @default(false)
  flagReason         String?
  duplicateFlaggedAt DateTime?
  verified           Boolean   @default(false)
  licenseEnforcedAt  DateTime?
  stripeCustomerId   String?
  phone              String?

  User                 User                   @relation(fields: [userId], references: [id])
  EnforcementLog       EnforcementLog[]
  payments             Payment[]
  serviceId            Int?
  Service              Service?               @relation("ServiceCompanies", fields: [serviceId], references: [id])
  DuplicateLicenseFlag DuplicateLicenseFlag[]
}

model SubTrade {
  id        Int      @id @default(autoincrement())
  tradeId   Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime

  Trade Trade @relation(fields: [tradeId], references: [id])
}

model DuplicateLicenseFlag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  builderId Int? // Nullable foreign key for Builder
  builder   Builder? @relation(fields: [builderId], references: [id])

  companyId Int? // Nullable foreign key for Company
  company   Company? @relation(fields: [companyId], references: [id])

  tradeId Int? // Nullable foreign key for Trade
  trade   Trade? @relation(fields: [tradeId], references: [id])

  matchedField   String
  existingValue  String
  attemptedValue String
  reason         String

  @@index([builderId])
  @@index([companyId])
  @@index([tradeId])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Decimal  @db.Decimal(12, 2)
  status    String   @default("pending") // pending | paid | failed
  builderId Int?
  companyId Int?
  tradeId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Builder Builder? @relation(fields: [builderId], references: [id])
  Company Company? @relation(fields: [companyId], references: [id])
  Trade   Trade?   @relation(fields: [tradeId], references: [id])
}

model EnforcementLog {
  id        Int  @id @default(autoincrement())
  userId    Int? // Linked user (admin or creator)
  builderId Int? // If enforcement targets a Builder
  companyId Int? // If enforcement targets a Company
  tradeId   Int? // If enforcement targets a Trade

  action      String // "auto_suspend", "warn_email_sent", etc.
  reason      String? // e.g. "License expired"
  status      String  @default("pending") // Make this safe for DB push
  performedBy String? // "system", "admin", or username
  details     String? // Optional JSON, notes, etc.

  createdAt DateTime @default(now())

  // 🔗 Relation references (optional and nullable, as needed)
  User    User?    @relation(fields: [userId], references: [id])
  Builder Builder? @relation(fields: [builderId], references: [id])
  Company Company? @relation(fields: [companyId], references: [id])
  Trade   Trade?   @relation(fields: [tradeId], references: [id])
}

// ───────────────────────────────────────────
// VerifiedEmail model — tracks verified user emails
// ───────────────────────────────────────────
model VerifiedEmail {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  entityType String // 'builder' | 'company' | 'trade'
  entityId   Int // ID of the related entity (Builder, Company, or Trade)
  verified   Boolean   @default(false)
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// ───────────────────────────────────────────
// Service model — supports dropdowns/categories
// ───────────────────────────────────────────
model Service {
  id   Int    @id @default(autoincrement())
  name String
  slug String @default("placeholder-slug") // ✅ temp default
  type String @default("general") // ✅ temp default

  parentId  Int?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Service?  @relation("ServiceHierarchy", fields: [parentId], references: [id])
  children Service[] @relation("ServiceHierarchy")

  builders  Builder[] @relation("ServiceBuilders")
  companies Company[] @relation("ServiceCompanies")
  trades    Trade[]   @relation("ServiceTrades")
}

// 🔁 Fix for reverse service relations
// These must be added inside each relevant model

// ⏺ In model Builder
// serviceId        Int?
// Service          Service? @relation("ServiceBuilders", fields: [serviceId], references: [id])

// ⏺ In model Company
// serviceId        Int?
// Service          Service? @relation("ServiceCompanies", fields: [serviceId], references: [id])

// ⏺ In model Trade
// serviceId        Int?
// Service          Service? @relation("ServiceTrades", fields: [serviceId], references: [id])

model Subscription {
  id              Int      @id @default(autoincrement())
  userId          Int
  planId          Int
  paymentInterval String
  amount          Decimal  @db.Decimal(10, 2)
  status          String   @default("active")
  startedAt       DateTime @default(now())
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])
}

model Plan {
  id           Int      @id @default(autoincrement())
  name         String
  tier         String? // <-- make optional for now
  priceMonthly Decimal? @db.Decimal(10, 2)
  priceYearly  Decimal? @db.Decimal(10, 2)
  description  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  subscriptions Subscription[]
}

// ───────────────────────────────────────────
//  Minimal multilingual CMS
// ───────────────────────────────────────────
model CMSPage {
  id        Int             @id @default(autoincrement())
  slug      String          @unique
  title     String //
  content   String          @db.Text //
  isDraft   Boolean         @default(false) //
  type      String          @default("landing")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  locales   CMSPageLocale[]
}

model CMSPageLocale {
  id        Int      @id @default(autoincrement())
  pageId    Int
  locale    String // e.g. "en", "fr", "zh-CN"
  title     String
  content   String   @db.Text
  isDraft   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  page CMSPage @relation(fields: [pageId], references: [id])
}

model Metadata {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  keywords    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ───────────────────────────────────────────
//  Biometric storage (face templates)
// ───────────────────────────────────────────
model FaceTemplate {
  id        Int      @id @default(autoincrement())
  userId    Int
  vector    Bytes // encrypted biometric template (NOT raw image)
  createdAt DateTime @default(now())

  user User @relation("UserFaceTemplates", fields: [userId], references: [id])
}

// ───────────────────────────────────────────
//  Central audit log for compliance
// ───────────────────────────────────────────
model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  model     String
  modelId   Int?
  action    String // "create" | "update" | "delete" | "login" | …
  diff      Json?
  ip        String?
  createdAt DateTime @default(now())

  user User? @relation("UserAuditLogs", fields: [userId], references: [id])
}

model StateAPIConfig {
  id        Int      @id @default(autoincrement())
  stateCode String
  apiUrl    String?
  apiKey    String?
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
