import { NextApiRequest, NextApiResponse } from "next";
import { prisma } from "@/lib/prisma";
import { sendAlertEmail } from "@/lib/sendAlertEmail";

// Checks for license duplication across Builder, Trade, and Company
async function checkLicenseDuplicates({ licenseId, email }) {
  const builderDup = await prisma.builder.findMany({
    where: { licenseId, ...(email ? { email: { not: email } } : {}) }
  });
  const tradeDup = await prisma.trade.findMany({ where: { licenseId } });
  const companyDup = await prisma.company.findMany({ where: { licenseId } });
  return [
    ...builderDup.map(d => ({ ...d, entity: "Builder" })),
    ...tradeDup.map(d => ({ ...d, entity: "Trade" })),
    ...companyDup.map(d => ({ ...d, entity: "Company" })),
  ];
}

export default async function handler(req, res) {
  if (req.method === "POST") {
    try {
      const { name, email, licenseId, phone, address } = req.body;

      // Check for duplicates
      const duplicates = await checkLicenseDuplicates({ licenseId, email });

      if (duplicates.length > 0) {
        // Flag all duplicates
        for (const dup of duplicates) {
          if (dup.entity === "Builder") {
            await prisma.builder.update({
              where: { id: dup.id },
              data: {
                flagged: true,
                flagReason: "Duplicate License Detected",
                duplicateFlaggedAt: new Date(),
                licenseStatus: "Suspended (Duplicate Detected)"
              }
            });
          } else if (dup.entity === "Trade") {
            await prisma.trade.update({
              where: { id: dup.id },
              data: {
                flagged: true,
                flagReason: "Duplicate License Detected",
                duplicateFlaggedAt: new Date(),
                licenseStatus: "Suspended (Duplicate Detected)"
              }
            });
          } else if (dup.entity === "Company") {
            await prisma.company.update({
              where: { id: dup.id },
              data: {
                flagged: true,
                flagReason: "Duplicate License Detected",
                duplicateFlaggedAt: new Date(),
                licenseStatus: "Suspended (Duplicate Detected)"
              }
            });
          }
        }
        return res.status(409).json({
          message: "Duplicate license detected. This record has been flagged."
        });
      }
        // Flag all duplicates
        for (const dup of duplicates) {
          if (dup.entity === "Builder") {
            await prisma.builder.update({
              where: { id: dup.id },
              data: {
                flagged: true,
                flagReason: "Duplicate License Detected",
                duplicateFlaggedAt: new Date(),
                licenseStatus: "Suspended (Duplicate Detected)"
              }
            });
          } else if (dup.entity === "Trade") {
            await prisma.trade.update({
              where: { id: dup.id },
              data: {
                flagged: true,
                flagReason: "Duplicate License Detected",
                duplicateFlaggedAt: new Date(),
  }
  }
  if (req.method === "POST") {
    try {
      const { name, email, licenseId, phone, address } = req.body;

      // Check duplicates and flag logic here (your existing logic)

      // Create new company record
      const company = await prisma.company.create({
        data: { name, email, licenseId, phone, address }
      });

      // Send alert email
      sendAlertEmail({
        subject: "New Company Registered",
        body: `Company ${name} registered with license ${licenseId}.`
      }).catch(console.error);

      res.status(201).json(company);
    } catch (error) {
      console.error("Error in POST /api/admin/companies:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  } else {
    res.setHeader("Allow", ["POST"]);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
